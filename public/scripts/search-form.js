import { renderBlock } from './lib.js';
export function renderSearchFormBlock(startDate = getDefaultDate().startDate, endDate = getDefaultDate().endDate) {
    const min_date = getMinDate();
    const maxDate = getMaxDate();
    renderBlock('search-form-block', `
    <form>
      <fieldset class="search-filedset">
        <div class="row">
          <div>
            <label for="city">Город</label>
            <input id="city" type="text" disabled value="Санкт-Петербург" />
            <input type="hidden" disabled value="59.9386,30.3141" />
          </div>
          <!--<div class="providers">
            <label><input type="checkbox" name="provider" value="homy" checked /> Homy</label>
            <label><input type="checkbox" name="provider" value="flat-rent" checked /> FlatRent</label>
          </div>--!>
        </div>
        <div class="row">
          <div>
            <label for="check-in-date">Дата заезда</label>
            <input id="check-in-date" type="date" value="${startDate}" min="${min_date}" max="${maxDate}" name="checkin" />
          </div>
          <div>
            <label for="check-out-date">Дата выезда</label>
            <input id="check-out-date" type="date" value="${endDate}" min="${min_date}" max="${maxDate}" name="checkout" />
          </div>
          <div>
            <label for="max-price">Макс. цена суток</label>
            <input id="max-price" type="text" value="" name="price" class="max-price" />
          </div>
          <div>
            <div><button id="searchButton">Найти</button></div>
          </div>
        </div>
      </fieldset>
    </form>
    `);
}
function getMinDate() {
    const date = new Date();
    const month_min_date = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;
    const day_min_date = date.getDate() < 10 ? `0${date.getDate() + 1}` : date.getDate();
    return `${date.getFullYear()}-${month_min_date}-${day_min_date}`;
}
function getDefaultDate() {
    const date = new Date();
    const startDate = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
    const endDate = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 3);
    const monthStart = startDate.getMonth() < 10 ? `0${startDate.getMonth() + 1}` : startDate.getMonth() + 1;
    const dayStart = startDate.getDate() < 10 ? `0${startDate.getDate() + 1}` : startDate.getDate();
    const monthEnd = endDate.getMonth() < 10 ? `0${endDate.getMonth() + 1}` : endDate.getMonth() + 1;
    const dayEnd = endDate.getDate() < 10 ? `0${endDate.getDate() + 1}` : endDate.getDate();
    return {
        startDate: `${startDate.getFullYear()}-${monthStart}-${dayStart}`,
        endDate: `${endDate.getFullYear()}-${monthEnd}-${dayEnd}`
    };
}
function getMaxDate() {
    const date = new Date();
    let year = date.getFullYear();
    if (date.getMonth() == 12) {
        year++;
    }
    let month_max_date = date.getMonth() < 10 ? `0${date.getMonth() + 2}` : date.getMonth() + 1;
    if (month_max_date == 12) {
        month_max_date = 1;
    }
    const day_max_date = new Date(year, (date.getMonth() == 12 ? 0 : date.getMonth()) + 2, 0);
    return `${year}-${month_max_date}-${day_max_date.getDate()}`;
}
// функция обработчик формы  ----- 2.
setTimeout(() => {
    const buttonSeact = document.querySelector('#searchButton');
    console.log(buttonSeact);
    buttonSeact.addEventListener('click', () => {
        event.preventDefault();
        const start = document.querySelector('#check-in-date');
        const end = document.querySelector('#check-out-date');
        const maxPrice = document.querySelector('#max-price');
        const searchData = {
            startDate: start.value,
            endDate: end.value,
            maxPrice: Number(maxPrice.value)
        };
        search(searchData, callBack);
    });
}, 500);
/**
 * function search
 * @param data ISearchFormData
 */
export function search(data, cb) {
    console.log(data);
    setTimeout(() => {
        if ((Math.floor(Math.random() * 100)) > 50) {
            cb('error');
        }
        else {
            cb(null, []);
        }
    }, 2000);
}
// function callback
const callBack = (error, places) => {
    if (error) {
        console.log(error);
    }
    else {
        console.log(places);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWZvcm0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VhcmNoLWZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQVl0QyxNQUFNLFVBQVUscUJBQXFCLENBQUMsWUFBb0IsY0FBYyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQWtCLGNBQWMsRUFBRSxDQUFDLE9BQU87SUFDOUgsTUFBTSxRQUFRLEdBQUcsVUFBVSxFQUFFLENBQUM7SUFDOUIsTUFBTSxPQUFPLEdBQUcsVUFBVSxFQUFFLENBQUM7SUFDN0IsV0FBVyxDQUNULG1CQUFtQixFQUNuQjs7Ozs7Ozs7Ozs7Ozs7Ozs7MkRBaUJ1RCxTQUFTLFVBQVUsUUFBUSxVQUFVLE9BQU87Ozs7NERBSTNDLE9BQU8sVUFBVSxRQUFRLFVBQVUsT0FBTzs7Ozs7Ozs7Ozs7O0tBWWpHLENBQ0YsQ0FBQTtBQUNILENBQUM7QUFHRCxTQUFTLFVBQVU7SUFDakIsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUN4QixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5RixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3JGLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksY0FBYyxJQUFJLFlBQVksRUFBRSxDQUFBO0FBQ2xFLENBQUM7QUFDRCxTQUFTLGNBQWM7SUFDckIsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUN4QixNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwRixNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsRixNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN6RyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hHLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2pHLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDeEYsT0FBTztRQUNMLFNBQVMsRUFBRSxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxVQUFVLElBQUksUUFBUSxFQUFFO1FBQ2pFLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxRQUFRLElBQUksTUFBTSxFQUFFO0tBQzFELENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxVQUFVO0lBQ2pCLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDeEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzlCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUN6QixJQUFJLEVBQUUsQ0FBQztLQUNSO0lBQ0QsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUYsSUFBSSxjQUFjLElBQUksRUFBRSxFQUFFO1FBQ3hCLGNBQWMsR0FBRyxDQUFDLENBQUM7S0FDcEI7SUFDRCxNQUFNLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxRixPQUFPLEdBQUcsSUFBSSxJQUFJLGNBQWMsSUFBSSxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQTtBQUM5RCxDQUFDO0FBRUQscUNBQXFDO0FBQ3JDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDeEIsV0FBVyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDekMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQXFCLENBQUM7UUFDM0UsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBcUIsQ0FBQztRQUMxRSxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBcUIsQ0FBQztRQUMxRSxNQUFNLFVBQVUsR0FBb0I7WUFDbEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ3RCLE9BQU8sRUFBRSxHQUFHLENBQUMsS0FBSztZQUNsQixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7U0FDakMsQ0FBQTtRQUNELE1BQU0sQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFPUDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsTUFBTSxDQUFDLElBQXFCLEVBQUUsRUFBbUI7SUFDL0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQzFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNiO2FBQU07WUFDTCxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ2Q7SUFDSCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDVixDQUFDO0FBRUQsb0JBQW9CO0FBQ3BCLE1BQU0sUUFBUSxHQUFvQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUNsRCxJQUFJLEtBQUssRUFBRTtRQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDcEI7U0FBTTtRQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDckI7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXJCbG9jayB9IGZyb20gJy4vbGliLmpzJ1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNlYXJjaEZvcm1EYXRhIHtcbiAgc3RhcnREYXRlOiBzdHJpbmcsXG4gIGVuZERhdGU6IHN0cmluZyxcbiAgbWF4UHJpY2U6IG51bWJlclxufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1pbnRlcmZhY2VcbmludGVyZmFjZSBJUGxhY2UgeyB9XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclNlYXJjaEZvcm1CbG9jayhzdGFydERhdGU6IHN0cmluZyA9IGdldERlZmF1bHREYXRlKCkuc3RhcnREYXRlLCBlbmREYXRlOiBzdHJpbmcgPSBnZXREZWZhdWx0RGF0ZSgpLmVuZERhdGUpIHtcbiAgY29uc3QgbWluX2RhdGUgPSBnZXRNaW5EYXRlKCk7XG4gIGNvbnN0IG1heERhdGUgPSBnZXRNYXhEYXRlKCk7XG4gIHJlbmRlckJsb2NrKFxuICAgICdzZWFyY2gtZm9ybS1ibG9jaycsXG4gICAgYFxuICAgIDxmb3JtPlxuICAgICAgPGZpZWxkc2V0IGNsYXNzPVwic2VhcmNoLWZpbGVkc2V0XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNpdHlcIj7Qk9C+0YDQvtC0PC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCBpZD1cImNpdHlcIiB0eXBlPVwidGV4dFwiIGRpc2FibGVkIHZhbHVlPVwi0KHQsNC90LrRgi3Qn9C10YLQtdGA0LHRg9GA0LNcIiAvPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBkaXNhYmxlZCB2YWx1ZT1cIjU5LjkzODYsMzAuMzE0MVwiIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPCEtLTxkaXYgY2xhc3M9XCJwcm92aWRlcnNcIj5cbiAgICAgICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInByb3ZpZGVyXCIgdmFsdWU9XCJob215XCIgY2hlY2tlZCAvPiBIb215PC9sYWJlbD5cbiAgICAgICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInByb3ZpZGVyXCIgdmFsdWU9XCJmbGF0LXJlbnRcIiBjaGVja2VkIC8+IEZsYXRSZW50PC9sYWJlbD5cbiAgICAgICAgICA8L2Rpdj4tLSE+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJjaGVjay1pbi1kYXRlXCI+0JTQsNGC0LAg0LfQsNC10LfQtNCwPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCBpZD1cImNoZWNrLWluLWRhdGVcIiB0eXBlPVwiZGF0ZVwiIHZhbHVlPVwiJHtzdGFydERhdGV9XCIgbWluPVwiJHttaW5fZGF0ZX1cIiBtYXg9XCIke21heERhdGV9XCIgbmFtZT1cImNoZWNraW5cIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiY2hlY2stb3V0LWRhdGVcIj7QlNCw0YLQsCDQstGL0LXQt9C00LA8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IGlkPVwiY2hlY2stb3V0LWRhdGVcIiB0eXBlPVwiZGF0ZVwiIHZhbHVlPVwiJHtlbmREYXRlfVwiIG1pbj1cIiR7bWluX2RhdGV9XCIgbWF4PVwiJHttYXhEYXRlfVwiIG5hbWU9XCJjaGVja291dFwiIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJtYXgtcHJpY2VcIj7QnNCw0LrRgS4g0YbQtdC90LAg0YHRg9GC0L7QujwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgaWQ9XCJtYXgtcHJpY2VcIiB0eXBlPVwidGV4dFwiIHZhbHVlPVwiXCIgbmFtZT1cInByaWNlXCIgY2xhc3M9XCJtYXgtcHJpY2VcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2PjxidXR0b24gaWQ9XCJzZWFyY2hCdXR0b25cIj7QndCw0LnRgtC4PC9idXR0b24+PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWVsZHNldD5cbiAgICA8L2Zvcm0+XG4gICAgYFxuICApXG59XG5cblxuZnVuY3Rpb24gZ2V0TWluRGF0ZSgpOiBzdHJpbmcge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgY29uc3QgbW9udGhfbWluX2RhdGUgPSBkYXRlLmdldE1vbnRoKCkgPCAxMCA/IGAwJHtkYXRlLmdldE1vbnRoKCkgKyAxfWAgOiBkYXRlLmdldE1vbnRoKCkgKyAxO1xuICBjb25zdCBkYXlfbWluX2RhdGUgPSBkYXRlLmdldERhdGUoKSA8IDEwID8gYDAke2RhdGUuZ2V0RGF0ZSgpICsgMX1gIDogZGF0ZS5nZXREYXRlKCk7XG4gIHJldHVybiBgJHtkYXRlLmdldEZ1bGxZZWFyKCl9LSR7bW9udGhfbWluX2RhdGV9LSR7ZGF5X21pbl9kYXRlfWBcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHREYXRlKCk6IHsgc3RhcnREYXRlOiBzdHJpbmcsIGVuZERhdGU6IHN0cmluZyB9IHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSArIDEpO1xuICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpICsgMyk7XG4gIGNvbnN0IG1vbnRoU3RhcnQgPSBzdGFydERhdGUuZ2V0TW9udGgoKSA8IDEwID8gYDAke3N0YXJ0RGF0ZS5nZXRNb250aCgpICsgMX1gIDogc3RhcnREYXRlLmdldE1vbnRoKCkgKyAxO1xuICBjb25zdCBkYXlTdGFydCA9IHN0YXJ0RGF0ZS5nZXREYXRlKCkgPCAxMCA/IGAwJHtzdGFydERhdGUuZ2V0RGF0ZSgpICsgMX1gIDogc3RhcnREYXRlLmdldERhdGUoKTtcbiAgY29uc3QgbW9udGhFbmQgPSBlbmREYXRlLmdldE1vbnRoKCkgPCAxMCA/IGAwJHtlbmREYXRlLmdldE1vbnRoKCkgKyAxfWAgOiBlbmREYXRlLmdldE1vbnRoKCkgKyAxO1xuICBjb25zdCBkYXlFbmQgPSBlbmREYXRlLmdldERhdGUoKSA8IDEwID8gYDAke2VuZERhdGUuZ2V0RGF0ZSgpICsgMX1gIDogZW5kRGF0ZS5nZXREYXRlKCk7XG4gIHJldHVybiB7XG4gICAgc3RhcnREYXRlOiBgJHtzdGFydERhdGUuZ2V0RnVsbFllYXIoKX0tJHttb250aFN0YXJ0fS0ke2RheVN0YXJ0fWAsXG4gICAgZW5kRGF0ZTogYCR7ZW5kRGF0ZS5nZXRGdWxsWWVhcigpfS0ke21vbnRoRW5kfS0ke2RheUVuZH1gXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TWF4RGF0ZSgpOiBzdHJpbmcge1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgbGV0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gIGlmIChkYXRlLmdldE1vbnRoKCkgPT0gMTIpIHtcbiAgICB5ZWFyKys7XG4gIH1cbiAgbGV0IG1vbnRoX21heF9kYXRlID0gZGF0ZS5nZXRNb250aCgpIDwgMTAgPyBgMCR7ZGF0ZS5nZXRNb250aCgpICsgMn1gIDogZGF0ZS5nZXRNb250aCgpICsgMTtcbiAgaWYgKG1vbnRoX21heF9kYXRlID09IDEyKSB7XG4gICAgbW9udGhfbWF4X2RhdGUgPSAxO1xuICB9XG4gIGNvbnN0IGRheV9tYXhfZGF0ZSA9IG5ldyBEYXRlKHllYXIsIChkYXRlLmdldE1vbnRoKCkgPT0gMTIgPyAwIDogZGF0ZS5nZXRNb250aCgpKSArIDIsIDApO1xuICByZXR1cm4gYCR7eWVhcn0tJHttb250aF9tYXhfZGF0ZX0tJHtkYXlfbWF4X2RhdGUuZ2V0RGF0ZSgpfWBcbn1cblxuLy8g0YTRg9C90LrRhtC40Y8g0L7QsdGA0LDQsdC+0YLRh9C40Log0YTQvtGA0LzRiyAgLS0tLS0gMi5cbnNldFRpbWVvdXQoKCkgPT4ge1xuICBjb25zdCBidXR0b25TZWFjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2hCdXR0b24nKTtcbiAgY29uc29sZS5sb2coYnV0dG9uU2VhY3QpXG4gIGJ1dHRvblNlYWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3Qgc3RhcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2hlY2staW4tZGF0ZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgY29uc3QgZW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NoZWNrLW91dC1kYXRlJykgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCBtYXhQcmljZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYXgtcHJpY2UnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGNvbnN0IHNlYXJjaERhdGE6IElTZWFyY2hGb3JtRGF0YSA9IHtcbiAgICAgIHN0YXJ0RGF0ZTogc3RhcnQudmFsdWUsXG4gICAgICBlbmREYXRlOiBlbmQudmFsdWUsXG4gICAgICBtYXhQcmljZTogTnVtYmVyKG1heFByaWNlLnZhbHVlKVxuICAgIH1cbiAgICBzZWFyY2goc2VhcmNoRGF0YSwgY2FsbEJhY2spO1xuICB9KVxufSwgNTAwKVxuXG5pbnRlcmZhY2UgSVNlYXJjaENhbGxiYWNrIHtcbiAgKGVycm9yPzogc3RyaW5nLCBwbGFjZXM/OiBJUGxhY2VbXSk6IHZvaWRcbn1cblxuXG4vKipcbiAqIGZ1bmN0aW9uIHNlYXJjaFxuICogQHBhcmFtIGRhdGEgSVNlYXJjaEZvcm1EYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2goZGF0YTogSVNlYXJjaEZvcm1EYXRhLCBjYjogSVNlYXJjaENhbGxiYWNrKTogdm9pZCB7XG4gIGNvbnNvbGUubG9nKGRhdGEpO1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCkpID4gNTApIHtcbiAgICAgIGNiKCdlcnJvcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYihudWxsLCBbXSk7XG4gICAgfVxuICB9LCAyMDAwKVxufVxuXG4vLyBmdW5jdGlvbiBjYWxsYmFja1xuY29uc3QgY2FsbEJhY2s6IElTZWFyY2hDYWxsYmFjayA9IChlcnJvciwgcGxhY2VzKSA9PiB7XG4gIGlmIChlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyhwbGFjZXMpO1xuICB9XG59Il19